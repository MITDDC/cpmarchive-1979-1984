;DASM.TDL (ver. 3.0)
;The following routine is the disassembler module for ZESOURCE.ASM
;(ver. >= 3.0).  This module produces TDL Z-80 mnemonics.  It must replace
;DASM.ZLG in the ZZSOURCE.ASM file (The Zilog version of ZESOURCE).
;
DASM:	CALL	HSYM	;write a symbol if it exists, then (on CRT) put PC
	LHLD	RPLPTR	;IS THIS ENTIRE LINE TO BE REPLACED?
	MOV	A,H
	ORA	L
	JZ	DASM1
	MOV	B,M
	INX	H
	DCR	B
	CALL	NWLN0
	MVI	A,0FFH
	STA	REPLSW
DASM1:	LHLD	PC							
	XCHG		;DE hold the PC					
	LHLD	OFFSET							
	DAD	D	;HL is now the biased PC			
	SHLD	BIASED							
	xchg								
	inx	h
	SHLD	PC	;the new PC (next byte)
	xchg		;DE is byte after instruction address
	MOV	b,M	;get the current byte
	LXI	H,OPC
	call	gtcd
	call	typeoc
;........TYPES 1, 2, AND 3 ARE 1-BYTE INSTRUCTIONS.
	CPI	4
	JC	OLDPC
;........TYPES 9, A, B AND C ARE 1-BYTE INSTRUCTIONS.
	CPI	9
	jc	xtnd	;not a 1-byte
	cpi	0dh
	jc	oldpc	;is a 1-byte
xtnd:	inx	h
	cpi	6
	jc	newpc	;types 4 & 5 are 2 byte
	cpi	9
	jnc	newpc	;types d, e, f, etc. -2 bytes or more
	inx	h	;3 bytes for 6, 7, and 8.
NEWPC:	SHLD	PC
OLDPC:	push	d
	MOV	E,A
	MVI	D,0
	LXI	H,JMPTBL
	DAD	D	;add 3*opcode type to JMPTBL to
	DAD	D	;.. get routine jump vector address
	DAD	D
	pop	d
	PUSH	H	;push address
	LHLD	BIASED
	RET		;'return' to routine 
;------------------------------------------------------------------------
;GO TO JUMP TABLE + 3*(OPCODE TYPE).
;
JMPTBL:	JMP	TZERO
	JMP	TONE
	JMP	TTWO
	JMP	TTHREE
	JMP	TFOUR
	JMP	TFIVE
	JMP	TSIX
	JMP	TSEVEN
	JMP	TEIGHT
	JMP	TNINE
	JMP	TTEN
	JMP	TELEVEN
;-------------------------------------------------------------------------
;				New decode routines
	jmp	t12	;bit, res, set
	jmp	t13	;djnz, jmpr
	jmp	t14	;jrxx
	jmp	t15	;the 'cb' series
	jmp	t16	;'db' generation
	jmp	t17	;the 'dd' series
	jmp	t18	; "  'fd'    "
	jmp	t19	; "  'ed'    "
	jmp	t20	;  2 byte dd/fd
	jmp	t21	;  "   "    "
	jmp	t22	;  "   "    "
	jmp	t23	;  3 byte dd/fd
	jmp	t24	;  "   "    "
	jmp	t25	;  "   "    "
	jmp	t26	;  LXIii nn
	jmp	t27	;  LIiiD, SIxxD
	jmp	t28	;  mvi	d(ii),n
	jmp	t29	;  the 4 byte 'cb' series
	jmp	t30	;  inc/dec/repeat group
	jmp	t31	;  4 byte direct store	
;
gtcd:	lxi	d,6
;find the opcode for this byte.
nxtcd:	dad	d
	mov	a,m	;get mask
	ana	b
	inx	h	;point to compare byte.
	cmp	m
	jnz	nxtcd
	inx	h
	mov	a,m	;get type
	sta	opctp
	ret
;type the opcode mnemonic.
typeoc:	mvi	b,4	;maximum of 4 characters to type
	inx	h
	mov	a,m
	cpi	'.'	;do not type '.'
	cnz	type
	dcr	b	;keep going if haven't scanned 4 characters
	jnz	typeoc+2
	lhld	pc
	lda	opctp
	ret
;------------------------------------------------------------------------
;SIMPLE ONE BYTE INSTRUCTIONS.
;
TZERO:	JMP	DCRLF
;ARITHMETIC AND LOGICAL INSTRUCTIONS.
;
TONE:	CALL	TAB
REG0:	CALL	PREG0
	JMP	DCRLF
;DCR AND INR INSTRUCTIONS.
TTWO:	CALL	TAB
	CALL	PREG1
	JMP	DCRLF
;DOUBLE REGISTER NON-IMMEDIATES.
TTHREE:	CALL	TAB
;------------------------------------------------------------------------
	mvi	e,'H'	;						|
;------------------------------------------------------------------------
	CALL	PXREG
	JMP	DCRLF
;THE 'MVI' INSTRUCTIONS.
;
TFOUR:	CALL	TAB
	CALL	PREG1
t4pt:	CALL	COMMA
	JMP	BYTWO
;REGISTER IMMEDIATES (EXCEPT MVI) AND IN & OUT.
TFIVE:	CALL	TAB
BYTWO:	LHLD	BIASED
	INX	H
	SHLD	BIASED
DTABYT:	MOV	A,M
	CPI	' '
	JC	NOTASC
	CPI	5BH
	JNC	NOTASC
;...ONLY TYPES 4 & 5 WITH ASCII DATA BYTES GET HERE.
	MOV	A,M
	CALL	PASCII
	MVI	A,''''
	CALL	TYPE
	LDA	XCSW		;IS SYMBOL COMMENTING ON?
	ORA	A
	JZ	DCRLF
	CALL	TAB
	CALL	SEMI
;..THE DATA BYTE SHOULD NOT BE PRINTED AS ASCII.
NOTASC:	MOV	A,M
	CPI	0AH
	JC	NTSC0
	CALL	PASHEX
	MVI	A,'H'
	CALL	TYPE
	JMP	DCRLF
NTSC0:	ADI	'0'
	CALL	TYPE
	JMP	DCRLF
;THE LXI INSTRUCTION.
TSIX:	CALL	TAB
;------------------------------------------------------------------------
	mvi	e,'H'	;						|
;------------------------------------------------------------------------
	CALL	PXREG
t6pt:	CALL	COMMA
;READ THE 2 BYTES AFTER BIASED INTO DE.
TWOBYTE:	LHLD	BIASED
	INX	H
	MOV	E,M
	INX	H
	MOV	D,M
	CALL	PRNTDE
	JMP	DCRLF
;UNCONDITIONAL JUMPS AND 3-BYTERS WITH ADDRESSES.
;
TSEVEN:	CALL	TAB
	JMP	TWOBYTE
;CONDITIONAL CALLS AND JUMPS.
;
;------------------------------------------------------------------------
TEIGHT:	mvi	e,0eh	;						|
	CALL	PRNTCND	;						|
;------------------------------------------------------------------------
	LHLD	BIASED
	JMP	TSEVEN
;THE CONDITIONAL RETURNS...
;------------------------------------------------------------------------
TNINE:	mvi	e,0eh	;						|
;------------------------------------------------------------------------
	CALL	PRNTCND
	JMP	DCRLF
;THE RST INSTRUCTION.....
;
TTEN:	CALL	TAB
	MOV	A,M
	RAR
	RAR
	RAR
	ANI	7
	ORI	'0'
	CALL	TYPE
	JMP	DCRLF
;-----------------------------------------------------------------------
TELEVEN:	CALL	TAB
	CALL	PREG1
t11pt:	CALL	COMMA
	lhld	biased
	MOV	A,M
	JMP	REG0
;------------------------------------------------------------------------
;				ADDED Z-80 ROUTINES			|
t12:	call	tab	;bit, res, set
	call	pbit
	jmp	t11pt
pbit:	mov	a,m
	rar
	rar
	rar
	ani	7
	adi	'0'
	jmp	type
t13:	call	tab	;djnz & jmpr
	inx	h
	mov	a,m
	mov	e,a
	mvi	d,0
	lhld	pc
	ora	a
	jp	pstv
	dcr	d
pstv:	dad	d
	xchg
	jmp	prntde
t14:	mvi	e,6	;conditional relative jumps
	call	prntcnd
	lhld	biased
	jmp	t13
t15:	inx	h	;the 'cb' series
	mov	b,m
	shld	biased	;new current byte
	lxi	h,opc2-6
	call	gtcd	;;octyp is either 1, 10h or 0ch	
	call	typeoc
	jmp	oldpc
t16:	lhld	pc	;a 'db', so back up the pc
	dcx	h
	shld	pc
	lhld	biased
	dcx	h	;back up here too
	jmp	prdb
t17:	mvi	e,'X'	;the 'dd' series 
t170:	push	d
	inx	h
	shld	biased	;second byte of instruction
	mov	b,m
	lxi	h,opc3-6
	call	gtcd
	call	typeoc
	pop	d
	cpi	23
	jc	oldpc
	inx	h
	cpi	26
	jc	newpc
	inx	h
	jmp	newpc
t18:	mvi	e,'Y'	;the 'fd' series
	jmp	t170
t19:	inx	h	;the 'ed' series
	shld	biased
	mov	b,m
	lxi	h,opc4-6
	call	gtcd
	call	typeoc
	cpi	1fh
	jc	oldpc
	inx	h
	inx	h
	jmp	newpc
t21:	call	tab	;pop x, push x
t20:	mov	a,e	;xtix, etc.
	call	type
	jmp	Dcrlf
t22:	mov	a,e
	call	type
	call	tab
	call	pxreg
	jmp	Dcrlf
t23:	call	tab
t231:	call	pdisp
	call	pindx
	jmp	Dcrlf
pdisp:	inx	h	;print displacement
	mov	a,m
	call	pashex
	mvi	a,'H'
	jmp	type
pindx:	mvi	a,'('	;print '(x)'
	call	type
	mov	a,e
	call	type
	mvi	a,')'	;
	jmp	type
t24:	call	tab	;mov r,d(ii)
	call	preg1
	call	comma
	lhld	biased
	jmp	t231
t25:	call	tab	;mov d(ii),r
	call	pdisp
	call	pindx
	jmp	t11pt
t26:	call	tab
	mov	a,e
	call	type
	jmp	t6pt
t27:	mov	a,e
	call	type
	mvi	a,'D'
	call	type
	jmp	tseven
t28:	call	tab	;mvi	d(ii),n
	call	pdisp
	call	pindx
	shld	biased
	jmp	t4pt
t29:	inx	h
	inx	h
	mov	b,m
	lxi	h,opc2-6
	push	d
	call	gtcd
	pop	d
	mov	a,b	;get o.c.
	ani	7
	cpi	6
	jnz	illeg
	call	typeoc
	lhld	biased
	cpi	0ch
	jc	t23
	jz	dd12
illeg:	lhld	pc
	dcx	h
	dcx	h
	shld	pc
	jmp	t16
dd12:	call	tab
	inx	h
	inx	h
	call	pbit
	call	comma
	dcx	h
	dcx	h
	jmp	t231
t30:	mov	a,m
	ani	8
	mvi	a,'I'
	jz	t301
	mvi	a,'D'
t301:	call	type
	mov	a,m
	ani	10h
	jz	Dcrlf
	mvi	a,'R'
	call	type
	jmp	Dcrlf
t31:	mvi	e,'H'
	call	pxreg
	mov	a,d
	rrc
	mov	d,a
	mvi	a,'C'
	dcr	d
	jm	t311
	mvi	a,'E'
	dcr	d
	jm	t311
	mvi	a,'L'
	dcr	d
t311:	cnz	type
	mvi	a,'D'
	call	type
	jmp	tseven
;the end of Z80 additions.						|
;------------------------------------------------------------------------
COMMA:	MVI	A,','
	JMP	TYPE
;...PRINT A HORIZONTAL TAB.
TAB:	MVI	A,9
	JMP	TYPE
;...PRINT A SEMICOLON.
SEMI:	MVI	A,';'
	JMP	TYPE
PRDB:	CALL	PSTG
	DB	'DB',9,0
	JMP	DTABYT
;...PRINT THE CONDITION CODE LETTERS FOR THIS INSTRUCTION.
PRNTCND: MOV	A,M
	RAR
	RAR
	ANA	E
	LXI	H,CNDTAB
	CALL	SKIP
	MOV	A,M
	CALL	TYPE
	INX	H
	MOV	A,M
	CPI	'.'
	CNZ	TYPE
	RET
;...PRINT A LEADING QUOTE AND THEN THE ASCII
;  (PRINT '' FOR ').
PASCII:	PUSH	PSW
	MVI	A,''''
	CALL	TYPE
	POP	PSW
	CPI	''''
	JNZ	TYPE
	PUSH	PSW
	CALL	TYPE
	POP	PSW
	JMP	TYPE
;...PRINT THE FALUE FOR A DOUBLE REGISTER.
PXREG:	MOV	A,M
	RAR
	RAR
	RAR
	ANI	6
;------------------------------------------------------------------------
	mov	d,a	;						|
	cpi	4
	JNZ	tagn
	mov	a,e
	jmp	type
tagn:	cpi	6
	jnz	preg
	mov	a,m	;						|
;------------------------------------------------------------------------
	ANI	0CFH
;......IS IT A POP?
	CPI	0C1H
	JZ	PPSW
;......IS IT A PUSH?
	CPI	0C5H
	JZ	PPSW
	MVI	A,'S'
	CALL	TYPE
	MVI	A,'P'
	JMP	TYPE
PPSW:	CALL	PSTG
	DB	'PSW',0
	RET
;...READ A BYTE AND PRINT ITS DEST. REGISTER.
PREG1:	MOV	A,M
	RAR
	RAR
	RAR
	JMP	PREG
;...READ A BYTE AND PRINT ITS SOURCE REGISTER.
PREG0:	MOV	A,M
PREG:	LXI	H,REGTAB
	ANI	7
	CALL	SKIP
	MOV	A,M
	JMP	TYPE
;...ADVANCE H & L BY (A).
SKIP:	ADD	L
	MOV	L,A
	RNC
	INR	H
	RET
;...PRINT THE VALUE IN A AS HEX,
;   WITH A LEADING ZERO IF NECESSARY.
PASHEX:	CPI	0A0H
	JC	PHEX
	PUSH	PSW
	MVI	A,'0'
	CALL	TYPE
	POP	PSW
	JMP	PHEX
;...PRINT A SYMBOLIC VALUE FOR (DE)
PRNTDE:	PUSH	D
	CALL	SYMSCH
	POP	D
	JNC	SYMTCH
	LDA	BUILD
	ORA	A
	JZ	NOBLD
	PUSH	D
	CALL	BLDSYM
	POP	D
	JMP	NOBLD
SYMTCH:	CALL	PRNT
PDERTN:	LDA	XCSW	;SYMBOL COMMENTING?
	ORA	A
	RZ
	CALL	TAB
	CALL	SEMI
NOBLD:	MOV	A,D
	ORA	E
	MVI	A,'0'
	JZ	NOBLD1
	MOV	A,D
	ORA	A
	JZ	NOBLD2
	CALL	PASHEX
	MOV	A,E
	CALL	PHEX
NOBLD0:	MVI	A,'H'
NOBLD1:	CALL	TYPE
	RET
NOBLD2:	MOV	A,E
	CPI	0AH
	JC	NOBLD3
	CALL	PASHEX
	JMP	NOBLD0
NOBLD3:	ADI	'0'
	JMP	NOBLD1
;...PRINT THE STRING AT (HL) FOR (B) CHARACTERS.
PRNT:	MOV	A,M
	CALL	TYPE
	INX	H
	DCR	B
	JNZ	PRNT
	RET
;
;<><><><><><><><><><> OPCODE TABLES <><><><><><><><><><>
;
CNDTAB:	DB	'NZZ.NCC.POPEP.M.'
REGTAB:	DB	'BC'
OPC:	DB	'DEHLMA'
	DB	0FFH,0CEH,5,'ACI.'
	DB	0F8H,88H,1,'ADC.'
	DB	0F8H,80H,1,'ADD.'
	DB	0FFH,0C6H,5,'ADI.'
	DB	0F8H,0A0H,1,'ANA.'
	DB	0FFH,0E6H,5,'ANI.'
	DB	0C7H,0C4H,8,'C...'
	DB	0FFH,0CDH,7,'CALL'
	DB	0FFH,2FH,0,'CMA.'
	DB	0FFH,3FH,0,'CMC.'
	DB	0F8H,0B8H,1,'CMP.'
	DB	0FFH,0FEH,5,'CPI.'
	DB	0FFH,27H,0,'DAA.'
	DB	0CFH,9,3,'DAD.'
	DB	0C7H,5,2,'DCR.'
	DB	0CFH,0BH,3,'DCX.'
	DB	0FFH,0F3H,0,'DI..'
	DB	0FFH,0FBH,0,'EI..'
	DB	0FFH,76H,0,'HLT.'
	DB	0FFH,0DBH,5,'IN..'
	DB	0C7H,4,2,'INR.'
	DB	0CFH,3,3,'INX.'
	DB	0C7H,0C2H,8,'J...'
	DB	0FFH,0C3H,7,'JMP.'
	DB	0FFH,3AH,7,'LDA.'
	DB	0EFH,0AH,3,'LDAX'
	DB	0FFH,2AH,7,'LHLD'
	DB	0CFH,1,6,'LXI.'
	DB	0C0H,40H,0BH,'MOV.'
	DB	0C7H,6,4,'MVI.'
	DB	0FFH,0,0,'NOP.'
	DB	0F8H,0B0H,1,'ORA.'
	DB	0FFH,0F6H,5,'ORI.'
	DB	0FFH,0D3H,5,'OUT.'
	DB	0FFH,0E9H,0,'PCHL'
	DB	0CFH,0C1H,3,'POP.'
	DB	0CFH,0C5H,3,'PUSH'
	DB	0C7H,0C0H,9,'R...'
	DB	0FFH,17H,0,'RAL.'
	DB	0FFH,1FH,0,'RAR.'
	DB	0FFH,0C9H,0,'RET.'
	DB	0FFH,0FH,0,'RRC.'
	DB	0FFH,7,0,'RLC.'
	DB	0C7H,0C7H,0AH,'RST.'
	DB	0F8H,98H,1,'SBB.'
	DB	0FFH,0DEH,5,'SBI.'
	DB	0FFH,22H,7,'SHLD'
	DB	0FFH,0F9H,0,'SPHL'
	DB	0FFH,32H,7,'STA.'
	DB	0EFH,2,3,'STAX'
	DB	0FFH,37H,0,'STC.'
	DB	0F8H,90H,1,'SUB.'
	DB	0FFH,0D6H,5,'SUI.'
	DB	0FFH,0EBH,0,'XCHG'
	DB	0F8H,0A8H,1,'XRA.'
	DB	0FFH,0EEH,5,'XRI.'
	DB	0FFH,0E3H,0,'XTHL'
;------------------------------------------------------------------------
	DB	0FFH,008H,0,'EXAF'	;				|
	DB	0FFH,0D9H,0,'EXX.'
	DB	0FFH,010H,0DH,'DJNZ'
	DB	0FFH,018H,0DH,'JMPR'
	DB	0E7H,020H,0EH,'JR..'
	DB	0FFH,0CBH,0FH,'....'	;THE 'CB' SERIES
	DB	0FFH,0DDH,11H,'....'	; "  'DD'    "
	DB	0FFH,0FDH,12H,'....'	; "  'FD'    "
	DB	0FFH,0EDH,13H,'....'	; "  'ED'    "
opc2:	DB	0F8H,0,1,'RLCR'
	DB	0F8H,8,1,'RRCR'
	DB	0F8H,10H,1,'RALR'
	DB	0F8H,18H,1,'RARR'
	DB	0F8H,20H,1,'SLAR'
	DB	0F8H,28H,1,'SRAR'
	DB	0F8H,38H,1,'SRLR'
	DB	0C0H,40H,0CH,'BIT.'
	DB	0C0H,80H,0CH,'RES.'
	DB	0C0H,0C0H,0CH,'SET.'
	DB	0,0,10H,'....'
opc3:	DB	0FFH,0E3H,14H,'XIT.'
	DB	0FFH,0E9H,14H,'PCI.'
	DB	0FFH,0F9H,14H,'SPI.'
	DB	0FFH,0E1H,15H,'POP.'
	DB	0FFH,0E5H,15H,'PUSH'
	DB	0CFH,9,16H,'DAD.'
;
	DB	0FFH,23H,15H,'INX.'
	DB	0FFH,2BH,15H,'DCX.'
	DB	0FFH,34H,17H,'INR.'
	DB	0FFH,35H,17H,'DCR.'
	DB	0FFH,86H,17H,'ADD.'
	DB	0FFH,8EH,17H,'ADC.'
	DB	0FFH,96H,17H,'SUB.'
	DB	0FFH,9EH,17H,'SBB.'
	DB	0FFH,0A6H,17H,'ANA.'
	DB	0FFH,0AEH,17H,'XRA.'
	DB	0FFH,0B6H,17H,'ORA.'
	DB	0FFH,0BEH,17H,'CMP.'
	DB	0C7H,046H,18H,'MOV.'
	DB	0F8H,070H,19H,'MOV.'
;
	DB	0FFH,021H,1AH,'LXI.'
	DB	0FFH,022H,1BH,'SI..'
	DB	0FFH,02AH,1BH,'LI..'
	DB	0FFH,036H,1CH,'MVI.'
	DB	0CBH,0CBH,1DH,'....'
	DB	0,0,010H,'....'
opc4:	DB	0FEH,070H,010H,'....'	;PREVENTS 'INP M'
	DB	0FFH,044H,0,'NEG.'
	DB	0FFH,045H,0,'RETN'
	DB	0FFH,046H,0,'IM0.'
	DB	0FFH,056H,0,'IM1.'
	DB	0FFH,05EH,0,'IM2.'
	DB	0FFH,047H,0,'STAI'
	DB	0FFH,04DH,0,'RETI'
	DB	0FFH,04FH,0,'STAR'
	DB	0FFH,057H,0,'LDAI'
	DB	0FFH,05FH,0,'LDAR'
	DB	0FFH,067H,0,'RRD.'
	DB	0FFH,06FH,0,'RLD.'
	DB	0CFH,042H,3,'DSBC'
	DB	0CFH,04AH,3,'DADC'
	DB	0C7H,040H,2,'INP.'
	DB	0C7H,041H,2,'OUTP'
	DB	0E7H,0A0H,1EH,'LD..'
	DB	0E7H,0A1H,1EH,'CC..'
	DB	0E7H,0A2H,1EH,'IN..'
	DB	0E7H,0A3H,1EH,'OUT.'
	DB	0CFH,043H,1FH,'S...'
	DB	0CFH,04BH,1FH,'L...'
	DB	0,0,010H,'....'
