Introduction fo Byte-Oriented File Input/Output Routines
Byte-Oriented Input and Output File Open
Byte-Oriented Input and Output File Close
Byte-Oriented Input and Output
Error Return Codes
:Byte-Oriented File Input/Output Routines
     The  following  documentation  covers the  series  of  byte-
oriented  file input/output routines in SYSLIB.   These  routines 
allow the user to sequentially read from (GET) and write to (PUT) 
a file on a byte-for-byte basis.   Hence,  these routines provide 
an exceptionally simple method for handling input from and output 
to a file.
     A typical program which employs these routines must open the 
required files before doing any processing, must then perform the 
processing  on the opened files,  and must then close  the  files 
when  the  processing is complete (closing the files is  optional 
for input files and mandatory for output files).
     SYSLIB provides four sets of routines for byte-oriented file 
input and output.  These routines are --

Input Open     Output Open     GET    PUT   Input Close  Output Close
----------     -----------     ---    ---   -----------  ------------
 FI0$OPEN       FO0$OPEN      F0$GET F0$PUT  FI0$CLOSE    FO0$CLOSE
 FI1$OPEN       FO1$OPEN      F1$GET F1$PUT  FI1$CLOSE    FO1$CLOSE
 FI2$OPEN       FO2$OPEN      F2$GET F2$PUT  FI2$CLOSE    FO2$CLOSE
 FI3$OPEN       FO3$OPEN      F3$GET F3$PUT  FI3$CLOSE    FO3$CLOSE

     This  system  allows  the user to have up to  8  files  open 
simultaneously -- four are open for input using GET and four  are 
open  for  output using PUT.   For example,  the following  is  a 
sample code section using these routines for two files:


          EXT  FI0$OPEN   ; DECLARE LIBRARY REFERENCES
          EXT  FO0$OPEN
          EXT  FI0$CLOSE
          EXT  FO0$CLOSE
          EXT  F0$GET
          EXT  F0$PUT
          ...
          LXI  D,FCBI    ; PT TO FCB OF INPUT FILE
          CALL FI0$OPEN
          LXI  D,FCBO    ; PT TO FCB OF OUTPUT FILE
          CALL FO0$OPEN
          ...
          [body containing CALL F0$GET and CALL F0$PUT where required]
          ...
          CALL FI0$CLOSE  ; CLOSE FILE
          CALL FO0$CLOSE
          ...
          END
     Note that only the routines to be used are referenced in the 
EXT statements.   If you do not need a particular routine, do not 
reference  it.   Not  referencing an unneeded  routine  generally 
saves the overhead memory space of loading it from the library.
     Each set of INPUT OPEN,  INPUT CLOSE,  OUTPUT  OPEN,  OUTPUT 
CLOSE,  GET, and PUT routines is contained in one library module, 
so  referencing any of these routines causes the entire module to 
be  loaded,  and  all  the routines are accessable  to  the  user 
(provided they are mentioned in the external definitions) without 
any   additional  memory   overhead.    Specifically,   FI0$OPEN, 
FI0$CLOSE,  FO0$OPEN, FO0$CLOSE, F0$GET, and F0$PUT are contained 
in one module,  and reference to any of these routines loads  the 
entire module; the same is true for the other sets of routines.
     The CLOSE routine for output (FOn$CLOSE) is ALWAYS required; 
it  fills  the rest of the current block with Ctrl-Z followed  by 
<NULL>  bytes and properly closes file.   The CLOSE  routine  for 
input (FIn$CLOSE) is required ONLY IF you are going to later open 
another  file  for  input using the  corresponding  OPEN  routine 
(FIn$OPEN).   FIn$CLOSE  only serves to reset the OPEN flag (used 
to GET to ascertain that the file has been properly opened).
:FI$OPEN and FO$OPEN, et al -- Byte-Oriented Input and Output File Open
     Routine Names:  FI0$OPEN, FI1$OPEN, FI2$OPEN, FI3$OPEN
     Function:
          Open  the file whose FCB is pointed to by DE for  input 
(use  with  F$GET).   FIn$OPEN  initializes the  FCB  fields,  so 
further initialization is not necessary.
     Inputs:  DE = ptr to FCB of file to open
     Outputs:  Z Flag is Error Indicator, A is Error Code
     Registers Affected:  PSW
     SYSLIB Routines Called:  Internal
     Special Error Conditions:  See Section on Error Codes

     Routine Names:  FO0$OPEN, FO1$OPEN, FO2$OPEN, FO3$OPEN
     Function:
          Open the file whose FCB is pointed to by DE for  output 
(use  with  F$PUT).   FOn$OPEN initializes  the  FCB  fields,  so 
further  initialization  is not necessary.   It also creates  the 
indicated file if it does not already exist.
     Inputs:  DE = ptr to FCB of file to open
     Outputs:  Z Flag is Error Indicator, A is Error Code
     Registers Affected:  PSW
     SYSLIB Routines Called:  Internal
     Special Error Conditions:  See Section on Error Codes
:FI$CLOSE and FO$CLOSE, et al -- Byte-Oriented Input and Output File Close
     Routine Names:  FI0$CLOSE, FI1$CLOSE, FI2$CLOSE, FI3$CLOSE
     Function:
          Close  the file previously opened by the  corresponding 
FI$OPEN  routine.   Use  of  these routines is  optional  if  the 
another  file  will  not be opened later in the  program  by  the 
corresponding FI$OPEN routine.
     Inputs:  -None-
     Outputs:  Z Flag is Error Indicator, A is Error Code
     Registers Affected:  PSW
     SYSLIB Routines Called:  Internal
     Special Error Conditions:  See Section on Error Codes

     Routine Names:  FO0$CLOSE, FO1$CLOSE, FO2$CLOSE, FO3$CLOSE
     Function:
          Close  the file previously opened by the  corresponding 
FO$OPEN routine.  Use of these routines is MANDATORY after output 
to the file (using the corresponding F$PUT routine) is complete.
     Inputs:  -None-
     Outputs:  Z Flag is Error Indicator, A is Error Code
     Registers Affected:  -None-
     SYSLIB Routines Called:  Internal
     Special Error Conditions:  See Section on Error Codes
:F$GET and F$PUT, et al -- Byte-Oriented Input and Output
     Routine Names:  F0$GET, F1$GET, F2$GET, F3$GET
     Function:
          Get the next byte in sequence from the file  previously 
opened by the corresponding FI$OPEN routine.  Byte is returned in 
Register A.
     Inputs:  -None-
     Outputs:  A = Next byte from file if no error
               If Error, NZ and A = Error Code
     Registers Affected:  PSW
     SYSLIB Routines Called:  Internal
     Special Error Conditions:  See Section on Error Codes

     Routine Names:  F0$PUT, F1$PUT, F2$PUT, F3$PUT
     Function:
          Put  the  byte in Register A onto the end of  the  file 
previously opened by the corresponding FO$OPEN routine.
     Inputs:  A = Byte to PUT
     Outputs:  Z Flag is Error Indicator, A is Error Code
     Registers Affected:  PSW
     SYSLIB Routines Called:  Internal
     Special  Error Conditions:  See Section on Error Codes
:Error Return Codes

     For  each of the routines in this set of byte-oriented  file 
I/O routines, the Zero Flag and the A Register play a key role in 
indicating the error conditions of the routines.

     If  the  Zero  Flag  is Set (Z) after  a  routine  has  been 
executed,  then this indicates that no error has occurred.  The A 
Register  is  either  unaffected (in most cases)  or  contains  a 
returned value (if so indicated, as in Fn$GET routines).

     If  the  Zero Flag is Clear (NZ) after a  routine  has  been 
executed,  then this indicates that an error has occurred.  The A 
Register  now  contains  the Error  Code.   The  following  table 
summarizes  the  Error  Codes  which may be  returned  in  the  A 
Register.

     The following screen display summarizes the Error Codes.


                     Summary of Error Codes
           Returned by Byte-Oriented File I/O Routines

          Code Meaning
          ---- -------

            1  GET or PUT attempted on an unopened file
            2  Disk Full (Ran out of space)
            3  Input File Not Found
            4  Attempt to Read Past EOF
            5  Directory Full
            6  Error in Closing a File
            7  Attempt to Open a File which is already Open

